
SET datestyle = 'ISO, MDY';

DROP TABLE IF EXISTS customers CASCADE;
DROP TABLE IF EXISTS orders CASCADE;
DROP TABLE IF EXISTS reviews CASCADE;
DROP TABLE IF EXISTS payments CASCADE;
DROP TABLE IF EXISTS sellers CASCADE;
DROP TABLE IF EXISTS products CASCADE;
DROP TABLE IF EXISTS order_items CASCADE;
DROP TABLE IF EXISTS translation;

-- Table: public.customers


CREATE TABLE IF NOT EXISTS customers
(
    customer_id character varying(50) ,
    customer_unique_id character varying(50) ,
    customer_zip_code_prefix integer,
    customer_city character varying(50) ,
    customer_state character varying(50) ,
    PRIMARY KEY (customer_id)
);

COPY customers FROM PROGRAM 'curl "https://raw.githubusercontent.com/Mylinear/Brazilian_E_Commerce_-Public_Dataset_by_Olist/main/olist_customers_dataset.csv"' (DELIMITER ',', FORMAT CSV, HEADER);


-- Table: public.orders

CREATE TABLE IF NOT EXISTS orders
(
    order_id character varying(50) ,
    customer_id character varying(50) ,
    order_status character varying(50) ,
    order_purchase_timestamp timestamp without time zone,
    order_approved_at timestamp without time zone,
    order_delivered_carrier_date timestamp without time zone,
    order_delivered_customer_date timestamp without time zone,
    order_estimated_delivery_date timestamp without time zone,
    PRIMARY KEY (order_id),
    FOREIGN KEY (customer_id)
        REFERENCES customers (customer_id) 
);

COPY orders FROM PROGRAM 'curl "https://raw.githubusercontent.com/Mylinear/Brazilian_E_Commerce_Public_Dataset_by_Olist/main/olist_orders_dataset.csv"' (DELIMITER ',', FORMAT CSV, HEADER);





CREATE TABLE IF NOT EXISTS reviews
(
    review_id character varying(100) ,
    order_id character varying(100) ,
    review_score smallint,
    review_comment_title character varying(100) ,
    review_comment_message varchar ,
    review_creation_date date,
    review_answer_timestamp timestamp without time zone,
    FOREIGN KEY (order_id)
        REFERENCES orders (order_id) 
        
);

COPY reviews FROM PROGRAM 'curl "https://raw.githubusercontent.com/Mylinear/Brazilian_E_Commerce_Public_Dataset_by_Olist/main/olist_order_reviews_dataset.csv"' (DELIMITER ',', FORMAT CSV, HEADER);

CREATE TABLE IF NOT EXISTS payments
(
    order_id character varying(100) ,
    payment_sequential integer,
    payment_type character varying(100) ,
    payment_installments integer,
    payment_value double precision,
    FOREIGN KEY (order_id)
        REFERENCES orders (order_id) 
);

COPY payments FROM PROGRAM 'curl "https://raw.githubusercontent.com/Mylinear/Brazilian_E_Commerce_Public_Dataset_by_Olist/main/olist_order_payments_dataset.csv"' (DELIMITER ',', FORMAT CSV, HEADER);


-- Table: public.sellers

CREATE TABLE IF NOT EXISTS sellers
(
    seller_id character varying(100),
    seller_zip_code_prefix integer,
    seller_city character varying(100) ,
    seller_state character varying(100) ,
    PRIMARY KEY (seller_id)
);

COPY sellers FROM PROGRAM 'curl "https://raw.githubusercontent.com/Mylinear/Brazilian_E_Commerce_Public_Dataset_by_Olist/main/olist_sellers_dataset.csv"' (DELIMITER ',', FORMAT CSV, HEADER);

CREATE TABLE IF NOT EXISTS products
(
    product_id character varying(100) ,
    product_category_name character varying(100) ,
    product_name_lenght integer,
    product_description_lenght integer,
    product_photos_qty integer,
    product_weight_g integer,
    product_length_cm integer,
    product_height_cm integer,
    product_width_cm integer,
    PRIMARY KEY (product_id)
);

COPY products FROM PROGRAM 'curl "https://raw.githubusercontent.com/Mylinear/Brazilian_E_Commerce_Public_Dataset_by_Olist/main/olist_products_dataset.csv"' (DELIMITER ',', FORMAT CSV, HEADER);


CREATE TABLE IF NOT EXISTS order_items
(
    order_id character varying(100) ,
    order_item_id integer,
    product_id character varying(100) ,
    seller_id character varying(100) ,
    shipping_limit_date timestamp without time zone,
    price real,
    freight_value real,
	FOREIGN KEY (order_id)
        REFERENCES orders (order_id),
	FOREIGN KEY (product_id)
        REFERENCES products (product_id),
	FOREIGN KEY (seller_id)
        REFERENCES public.sellers (seller_id)
    );

COPY order_items FROM PROGRAM 'curl "https://raw.githubusercontent.com/Mylinear/Brazilian_E_Commerce_Public_Dataset_by_Olist/main/olist_order_items_dataset.csv"' (DELIMITER ',', FORMAT CSV, HEADER);




CREATE TABLE IF NOT EXISTS translation
(
    category_name character varying ,
    category_name_english character varying 
);

COPY translation FROM PROGRAM 'curl "https://raw.githubusercontent.com/Mylinear/Brazilian_E_Commerce_Public_Dataset_by_Olist/main/product_category_name_translation.csv"' (DELIMITER ',', FORMAT CSV, HEADER);
select *from translation

---------CASE1
---SORU1
select 
to_char(order_approved_at, 'YYYY-MM' ) AS tarih,
count(distinct order_id) AS order_count
from orders
where to_char(order_approved_at, 'YYYY-MM' ) IS NOT NULL
group by 1
ORDER BY 1;

---SORU2

---DELİVERED İÇİN 
select 
to_char(order_approved_at, 'YYYY-MM' ) AS tarih,
count(DISTINCT order_id) AS order_count, 
order_status
from orders
where order_status IN ('delivered') 
group by 1,3
order by 1,3;
-----
--DİĞER 2 STATÜ İÇİN
select to_char(order_approved_at, 'YYYY-MM' ) AS tarih,
count(DISTINCT order_id) AS order_count, order_status
from orders
where order_status IN ('canceled','shipped')
group by 1,3 
order by 1,3

----GENEL DOSYAYA EKLENECEK SORGU BU
select to_char(order_approved_at, 'YYYY-MM' ) AS tarih, 
order_status,
count(order_id) AS order_count
from orders
group by 1,2
order by 1,2 DESC

---SORU3

----NOEL göre dağılım
with siralama as (SELECT to_char(order_approved_at, 'YYYY-MM' ) AS tarih,
count(DISTINCT orders.order_id) as sold_product_count, product_category_name,
row_number() over(partition by to_char(order_approved_at, 'YYYY-MM' ) order by count(DISTINCT orders.order_id) desc) as rn			  
from orders
join order_items on orders.order_id = order_items.order_id
join products on products.product_id = order_items.product_id
WHERE to_char(order_approved_at, 'YYYY-MM' ) IN ('2016-12','2017-12')
group by 1,3
order by 1,2 desc)
select tarih, max(product_category_name) as product_category_name, sold_product_count
from siralama
where rn IN (1,2,3,4,5)
group by 1,3
order by 1,3 desc;

--- 3 KRAL BAYRAMI
with siralama as (SELECT to_char(order_approved_at, 'YYYY-MM-DD' ) AS tarih,
count(DISTINCT orders.order_id) as sold_product_count, product_category_name
from orders
join order_items on orders.order_id = order_items.order_id
join products on products.product_id = order_items.product_id
WHERE to_char(order_approved_at, 'YYYY-MM-DD' ) IN ('2017-01-06','2018-01-06')
group by 1,3
order by 1,2 desc)
select tarih, max(product_category_name) as product_category_name, sold_product_count
from siralama
group by 1,3
order by 1,3 desc

-----BREZİLYA AŞIKLAR GÜNÜ
with siralama as (SELECT to_char(order_approved_at, 'YYYY-MM-DD' ) AS tarih,
count(DISTINCT orders.order_id) as sold_product_count, product_category_name
from orders
join order_items on orders.order_id = order_items.order_id
join products on products.product_id = order_items.product_id
WHERE to_char(order_approved_at, 'YYYY-MM-DD' ) IN ('2017-06-12','2018-06-12')
group by 1,3
order by 1,2 desc)
select tarih, max(product_category_name) as product_category_name, sold_product_count
from siralama
group by 1,3
order by 1,3 desc

---genel
SELECT 
product_category_name,
category_name_english,
count(DISTINCT orders.order_id) as sold_product_count
from orders
inner join order_items on orders.order_id = order_items.order_id
inner join products on products.product_id = order_items.product_id
join translation on products.product_category_name=translation.category_name
group by 1,2
order by 3 desc
LIMIT 15

---soru4
--AYIN GÜNLERİ BAZLI
select count(DISTINCT order_id) AS order_count, 
to_char(order_purchase_timestamp, 'DD' ) AS ayin_gunu
from orders
group by 2
ORDER BY 1 desc 
LIMIT 10

--- HAFTANIN GÜNLERİ BAZLI
select count(DISTINCT order_id) AS order_count, 
to_char(order_purchase_timestamp, 'DAY' ) AS haftanin_gunu
from orders
group by 2
ORDER BY 1 DESC

------CASE2 
---SORU1
select 
customer_city,
sum(order_count) as total_order_count
from(select
customer_unique_id,
order_count,
customer_city,
row_number() over (partition by customer_unique_id order by order_count ) as rn
from
(with siralama1 as (SELECT
customer_unique_id,
customer_city,
count(distinct order_id) as order_count
from customers as cus
join orders as o on o.customer_id=cus.customer_id
group by 1,2)
select customer_unique_id,
customer_city,
sum(order_count) as order_count
from siralama1
group by 1,2
order by 3 desc) as siralama2) as siralama3
group by 1
order by 2 desc

------CASE3 
----SORU1
----ort sipariş 32
with top_5 as 
(select 
COUNT(DISTINCT orders.order_id) AS order_count,
SELLERS.seller_id as seller_id,
AVG(AGE(order_delivered_customer_date,order_purchase_timestamp)) as avg_delivery_time
from orders
join order_items as oi on orders.order_id= oi.order_id
join sellers on sellers.seller_id = oi.seller_id
GROUP BY 2
HAVING COUNT(DISTINCT orders.order_id) > 35
ORDER BY 3
LIMIT 5)
select 
top_5.seller_id,
order_count,
avg_delivery_time,
count(review_comment_message) as comment_count,
round(avg(review_score),2) as avg_score
from top_5
join order_items as oi on oi.seller_id= top_5.seller_id
join reviews on oi.order_id= reviews.order_id
group by 1,2,3
order by 3




----SORU2
with tablo as (select 
count(distinct orders.order_id) as total_order_count, 
oi.seller_id,
rank()over(order by count(orders.order_id) desc) seller_rn	   
from orders
join order_items as oi on orders.order_id=oi.order_id
group by 2
order by 1 desc)
SELECT
order_items.seller_id, 
count(DISTINCT product_category_name) as total_order_category_count, 
tablo.total_order_count,
tablo.seller_rn
from order_items
join products on order_items.product_id=products.product_id
join tablo on order_items.seller_id = tablo.seller_id
group by 1,3,4
order by 2 DESC, 3 desc
LIMIT 10;


------CASE4

---SORU1
select 
count(customer_city)as more_installment_count, 
customer_city
from (select payment_installments,
customer_city, 
payments.order_id
from payments
join orders on orders.order_id = payments.order_id
join customers on customers.customer_id = orders.customer_id
where payment_installments >6
order by 1 desc) as installment_count
group by 2
order by 1 desc
LIMIT 10;

----SORU2
select 
payment_type, 
order_status,
count(order_status) as success_order_count, 
sum(payment_value) as total_payment
from orders
join payments on orders.order_id= payments.order_id
where order_status = 'delivered'
group by 1,2
order by 3 desc;

----SORU3
 ---tek çekim alışverişler
select 
product_category_name,category_name_english, count(DISTINCT pay.order_id) as single_paying_count
from products
join order_items as oi on oi.product_id =products.product_id
join payments as pay on oi.order_id=pay.order_id
join translation as tr on tr.category_name = products.product_category_name
WHERE payment_installments = 1
group by 1,2
order by 3 desc
LIMIT 10

---taksitli alışverişler
select 
product_category_name, category_name_english,count(DISTINCT pay.order_id) as installment_paying_count
from products
join order_items as oi on oi.product_id =products.product_id
join payments as pay on oi.order_id=pay.order_id
join translation as tr on tr.category_name = products.product_category_name
WHERE payment_installments <>1
group by 1,2
order by 3 desc
LIMIT 10
;
---diğer bir seçenek
select 
product_category_name, category_name_english,payment_installments, count(DISTINCT pay.order_id) as installment_paying_count
from products
join order_items as oi on oi.product_id =products.product_id
join payments as pay on oi.order_id=pay.order_id
join translation as tr on tr.category_name = products.product_category_name
WHERE payment_installments <>1
group by 1,2,3
order by 4 desc

-----CASE5

with recency as ( with t1 as (SELECT customer_id,
max(invoicedate) ::date as max_date
from rfm
where quantity>0 and customer_id IS NOT NULL
group by 1
order by 1)
select t1.customer_id,
max_date,
'2011-12-09' - max_date as recency
from t1
order by 1
),
frequency as (SELECT customer_id,
count(distinct invoiceno) AS frequency
from rfm
where QUANTITY >0 and customer_id IS NOT NULL
group by 1
order by 2 desc),
monetary as (SELECT customer_id,
sum(DISTINCT quantity*unitprice) as monetary
from rfm
where QUANTITY >0 and customer_id IS NOT NULL
group by 1
order by 1
), scores as (
select r.customer_id,
r.recency,
ntile(5) over(order by recency desc, r.customer_id) as recency_score,
f.frequency,
case when frequency between 1 and 2 then '1'
when frequency between 3 and 5 then '2'
when frequency between 6 and 10 then '3'
when frequency between 11 and 20 then '4'
else 5 end as frequency_score,
m.monetary,
ntile(5) over(order by monetary) as monetary_score
from
recency as r
join frequency as f on r.customer_id =f.customer_id
join monetary as m on m.customer_id=r.customer_id)
select customer_id,
recency_score || '-' ||frequency_score || '-'|| monetary_score as rfm_scores
from scores
order by 1







































































